/*
* myFocus JavaScript Library v2.0.1
* Open source under the BSD & GPL License
* 
* Copyright 2012, Koen Lee
* http://cosmissy.com/
* 
* Date: 2012/05/26
*/
(function () {
    //DOM鍩虹鎿嶄綔鍑芥暟
    var $id = function (id) {
        return typeof id === 'string' ? document.getElementById(id) : id;
    },
		$tag = function (tag, parentNode) {
		    return ($id(parentNode) || document).getElementsByTagName(tag);
		},
		$tag_ = function (tag, parentNode) {
		    return $getChild(tag, parentNode, 'tag');
		},
		$class = function (className, parentNode) {
		    var doms = $tag('*', parentNode), arr = [];
		    for (var i = 0, l = doms.length; i < l; i++) {
		        if (hasClass(className, doms[i])) {
		            arr.push(doms[i]);
		        }
		    }
		    return arr;
		},
		$class_ = function (className, parentNode) {
		    return $getChild(className, parentNode);
		},
		$getChild = function (selector, parentNode, type) {
		    var arr = [], fn = type === 'tag' ? $tag : $class, doms = fn(selector, parentNode), len = doms.length;
		    for (var i = 0; i < len; i++) {
		        if (doms[i].parentNode === parentNode) arr.push(doms[i]);
		        i += fn(selector, doms[i]).length;
		    }
		    return arr;
		},
		hasClass = function (className, node) {
		    return eval('/(^|\\s)' + className + '(\\s|$)/').test(node.className);
		};
    //瀹氫箟myFocus鍏ㄥ眬鍙橀噺
    newMyFocus = function (settings) {
        return new newMyFocus.constr(settings);
    };
    //鎵╁睍
    newMyFocus.extend = function () {
        var arg = arguments, len = arg.length;
        if (this === newMyFocus) {//浣滀负鏂规硶鎵╁睍锛屽鏋滃彧鏈変竴涓弬鏁版墿灞曟湰韬�
            if (len === 1) dest = newMyFocus, i = 0; //鎵╁睍newMyFocus绫�
            else dest = arg[0], i = 1;
        } else {//鎵╁睍寮曠敤瀵硅薄鏈韩
            dest = this, i = 0;
        }
        for (i; i < len; i++) {
            for (var p in arg[i]) {
                dest[p] = arg[i][p]; //dest灞炴€ф渶浣�
            }
        }
        return dest;
    };
    newMyFocus.extend({
        defConfig: {//鍏ㄥ眬榛樿璁剧疆
            pattern: 'mF_fancy', //椋庢牸鏍峰紡
            trigger: 'click', //瑙﹀彂鍒囨崲妯″紡['click'(榧犳爣鐐瑰嚮)|'mouseover'(榧犳爣鎮仠)]
            txtHeight: 'default', //鏂囧瓧灞傞珮搴﹁缃甗num(鏁板瓧,鍗曚綅鍍忕礌,0琛ㄧず闅愯棌鏂囧瓧灞�,鐪佺暐璁剧疆鍗充负榛樿楂樺害)]
            wrap: true, //鏄惁淇濈暀杈规(鏈夌殑璇�)[true|false]
            auto: true, //鏄惁鑷姩鎾斁(鍒囨崲)[true|false]
            time: 4, //姣忔鍋滅暀鏃堕棿[num(鏁板瓧,鍗曚綅绉�)]
            index: 0, //寮€濮嬫樉绀虹殑鍥剧墖搴忓彿(浠�0绠楄捣)[num(鏁板瓧)]
            loadIMGTimeout: 3, //杞藉叆鍥剧墖鐨勬渶闀跨瓑寰呮椂闂�(Loading鐢婚潰鏃堕棿)[num(鏁板瓧,鍗曚綅绉�,0琛ㄧず涓嶇瓑寰呯洿鎺ユ挱鏀�)]
            delay: 100, //瑙﹀彂鍒囨崲妯″紡涓�'mouseover'妯″紡涓嬬殑鍒囨崲寤惰繜[num(鏁板瓧,鍗曚綅姣)]
            __focusConstr__: true//绋嬪簭鏋勯€犲弬鏁�
        },
        constr: function (settings) {//鏋勯€犲嚱鏁�
            var e = settings, len = e && e.length;
            if (e instanceof newMyFocus.constr) return e; //newMyFocus::[]
            this.length = 0;
            if (!e || (e.sort && !len) || (e.item && !len)) {//null/array::[]/nodeList::[]
                Array.prototype.push.call(this);
            } else if (e.__focusConstr__) {//new newMyFocus
                e = $id(e.id);
                Array.prototype.push.call(this, e);
                this.settings = settings;
                this.HTMLUList = $tag('li', $tag('ul', e)[0]);
                this.HTMLUListLength = this.HTMLUList.length;
            } else if (len) {//nodeList/Array/瀛楃涓�
                for (var i = 0; i < len; i++) Array.prototype.push.call(this, e[i]);
            } else {//node
                Array.prototype.push.call(this, e);
            }
            return this;
        },
        fn: { splice: [].splice }, //鍘熷舰
        pattern: {}, //椋庢牸闆�
        config: {}//鍙傛暟闆�
    });
    newMyFocus.constr.prototype = newMyFocus.fn;
    newMyFocus.fn.extend = newMyFocus.pattern.extend = newMyFocus.config.extend = newMyFocus.extend;
    newMyFocus.fn.extend({//DOM
        find: function (selector) {//閫夋嫨鍣ㄥ彧搴旂敤鍩烘湰鏌ユ壘,鏆備笉鑰冭檻鐢╭uerySelectorAll
            var parent = this, isChild = false, $ = newMyFocus;
            var arr = this.parseSelector(selector);
            if (this.length) for (var i = 0, len = arr.length; i < len; i++) {
                var dom = [], s = arr[i];
                switch (s.charAt(0)) {
                    case '>': //children
                        isChild = true;
                        break;
                    case '.': //class
                        var cls = s.slice(1);
                        var fn = isChild ? $class_ : $class;
                        $(parent).each(function () {
                            dom = dom.concat(fn(cls, this));
                        });
                        isChild = false;
                        break;
                    case '#': //id
                        var id = s.slice(1), e = $id(id);
                        if (e) dom.push($id(id));
                        isChild = false;
                        break;
                    default: //tag(鏀寔'tag.class'瀵绘壘,涓嶆敮鎸佷篃涓嶅缓璁敤'tag#id'瀵绘壘,璇风敤'#id')
                        var fn = isChild ? $tag_ : $tag, sArr = s.split('.');
                        var tag = sArr[0], cls = sArr[1];
                        $(parent).each(function () {
                            var arr = fn(tag, this);
                            for (var i = 0, len = arr.length; i < len; i++) {
                                if (cls && !hasClass(cls, arr[i])) continue;
                                dom.push(arr[i]);
                            }
                        });
                        isChild = false;
                }
                if (!isChild) parent = dom; //寰幆璧嬪€肩埗鍏冪礌
            }
            return $(parent);
        },
        parent: function () {
            return newMyFocus(this[0].parentNode);
        },
        html: function (s) {
            if (typeof s !== 'undefined') { this[0].innerHTML = s; return this; }
            else return this[0].innerHTML;
        },
        each: function (fn) {
            var doms = this;
            for (var i = 0, len = doms.length; i < len; i++) {
                var flag = fn.call(doms[i], i);
                if (flag === false) break;
                if (flag === true) continue;
            }
            return this;
        },
        eq: function (n) {
            return newMyFocus(this[n]);
        },
        parseSelector: function (selector) {
            var chunker = /(([^[\]'"]+)+\]|\\.|([^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?/g;
            var parts = [], m;
            while ((m = chunker.exec(selector)) !== null) {
                parts.push(m[1]); //瀛樺偍鍖归厤鐨勫瓧绗︿覆淇℃伅
            }
            return parts;
        },
        wrap: function (html) {//姣忔鍙獁rap涓€涓厓绱�,澶氫釜璇风敤each
            var o = this[0], e = document.createElement('div');
            e.innerHTML = html;
            var wrap = e.firstChild;
            o.parentNode.replaceChild(wrap, o);
            wrap.appendChild(o);
            return this;
        },
        addHtml: function (html) {
            var parent = this[0];
            var e = document.createElement('div');
            e.innerHTML = html;
            var dom = e.childNodes[0];
            parent.appendChild(dom);
            return newMyFocus(dom);
        },
        addList: function (className, type) {
            var li = this.HTMLUList, n = this.HTMLUListLength;
            var strArr = ['<div class="' + className + '"><ul>'];
            for (var i = 0; i < n; i++) {
                var img = $tag('img', li[i])[0], html;
                switch (type) {
                    case 'num': html = '<a>' + (i + 1) + '</a><b></b>'; break; //b鏍囩涓昏鏄负浜嗗仛閫忔槑鑳屾櫙,涓嬪悓
                    case 'txt': html = img ? li[i].innerHTML.replace(/\<img(.|\n|\r)*?\>/i, img.alt) + '<p>' + img.getAttribute("text") + '</p><b></b>' : ''; break;
                    case 'thumb': html = img ? '<a><img src=' + (img.getAttribute("thumb") || img.src) + ' /></a><b></b>' : ''; break;
                    default: html = '<a></a><b></b>';
                }
                strArr.push('<li>' + html + '</li>');
            }
            strArr.push('</ul></div>');
            return this.addHtml(strArr.join(''));
        },
        addListNum: function (className) {
            return this.addList(className || 'num', 'num'); //榛樿class=num
        },
        addListTxt: function (className) {
            return this.addList(className || 'txt', 'txt'); //榛樿class=txt
        },
        addListThumb: function (className) {
            return this.addList(className || 'thumb', 'thumb'); //榛樿class=thumb
        },
        remove: function () {
            var o = this[0];
            if (o) o.parentNode.removeChild(o);
        },
        repeat: function (n) {
            var n = n || 2, pNode = this[0].parentNode, html = pNode.innerHTML, s = [];
            for (var i = 0; i < n; i++) s.push(html);
            pNode.innerHTML = s.join('');
            return newMyFocus(pNode).find(this[0].nodeName);
        }
    });
    newMyFocus.fn.extend({//CSS
        css: function (css) {//鍙幏鍊兼垨璁惧€�
            var o = this[0], value, arr = [';'], isIE = newMyFocus.isIE;
            if (!o) return this;
            if (typeof css === 'string') {//鑾峰緱css灞炴€у€�,杩斿洖鍊间笉甯﹀崟浣�
                if (css === 'float') css = isIE ? 'styleFloat' : 'cssFloat';
                if (!(value = o.style[css])) value = (isIE ? o.currentStyle : getComputedStyle(o, ''))[css];
                if (css === 'opacity' && value === undefined) value = 1; //浠呬负鍦↖E涓緱鍒伴粯璁ゅ€�1
                if (value === 'auto' && (css === 'width' || css === 'height')) value = o['offset' + css.replace(/\w/i, function (a) { return a.toUpperCase() })];
                var numVal = parseFloat(value);
                return isNaN(numVal) ? value : numVal;
            } else {//璁剧疆css灞炴€у€�,涓嶆敮鎸�('height','300px')褰㈠紡,璇峰彉鎴�-->({height:'300px'}),鍙互涓嶅甫鍗曚綅px
                for (var p in css) {
                    if (typeof css[p] === 'number' && !this.cssNumber[p]) css[p] += 'px';
                    arr.push(p.replace(/([A-Z])/g, '-$1') + ':' + css[p] + ';');
                    if (p === 'opacity') arr.push('filter:alpha(opacity=' + css[p] * 100 + ')');
                }
                o.style.cssText += arr.join('');
                return this;
            }
        },
        setOpacity: function (value) {//浠呯敤浜巃nimate瑕佹眰楂樻晥鐨勬牳蹇冪畻娉曚腑,鍏跺畠鎯呭喌鍙敤css()浠ｆ浛
            this[0].style.opacity = value, this[0].style.filter = 'alpha(opacity=' + value * 100 + ')';
        },
        setAnimateStyle: function (value, prop, m) {//浠呯敤浜巃nimate瑕佹眰楂樻晥鐨勬牳蹇冪畻娉曚腑,鍏跺畠鎯呭喌鍙敤css()浠ｆ浛
            this[0].style[prop] = Math[m](value) + 'px';
        },
        addClass: function (className) {
            this[0].className += ' ' + className;
            return this;
        },
        removeClass: function (className) {
            var o = this[0], cls = className && o.className, reg = "/\\s*\\b" + className + "\\b/g";
            o.className = cls ? cls.replace(eval(reg), '') : '';
            return this;
        },
        cssNumber: { fillOpacity: true, fontWeight: true, lineHeight: true, opacity: true, orphans: true, widows: true, zIndex: true, zoom: true}//涓嶅姞px鐨刢ss,鍙傝€僯Query
    });
    newMyFocus.fn.extend({//Animate
        animate: function (attr, value, time, type, funcBefore, funcAfter) {//value鏀寔鐩稿澧炲€�'+=100',鐩稿鍑忓€�'-=100'褰㈠紡
            var $o = this, o = $o[0], isOpacity = attr === 'opacity', diffValue = false;
            funcBefore && funcBefore.call(o);
            if (typeof value === 'string') {
                if (/^[+-]=\d+/.test(value)) value = value.replace('=', ''), diffValue = true;
                value = parseFloat(value);
            }
            var oriVal = $o.css(attr), //鍘熷灞炴€у€�
				b = isNaN(oriVal) ? 0 : oriVal, //寮€濮嬪€�,鏃犲€兼椂涓�0
				c = diffValue ? value : value - b, //宸€�
				d = time, //鎬昏繍琛屾椂闂�
				e = this.easing[type], //缂撳姩绫诲瀷
				m = c > 0 ? 'ceil' : 'floor', //鍙栨渶澶х粷瀵瑰€�
				timerId = '__newMyFocusTimer__' + attr, //璁℃暟鍣╥d
				setProperty = $o[isOpacity ? 'setOpacity' : 'setAnimateStyle'], //灞炴€ц缃柟娉�
				origTime = (new Date) * 1; //鍘熷鏃堕棿鍊�
            o[timerId] && clearInterval(o[timerId]);
            o[timerId] = setInterval(function () {
                var t = (new Date) - origTime; //宸茶繍琛屾椂闂�
                if (t <= d) {
                    setProperty.call($o, e(t, b, c, d), attr, m);
                } else {
                    setProperty.call($o, b + c, attr, m); //璁剧疆鏈€缁堝€�
                    clearInterval(o[timerId]), o[timerId] = null;
                    funcAfter && funcAfter.call(o);
                }
            }, 13);
            return this;
        },
        fadeIn: function (time, type, fn) {
            if (typeof time !== 'number') fn = time, time = 400; //榛樿400姣
            if (typeof type === 'function') fn = type, type = '';
            this.animate('opacity', 1, time, type || 'linear', function () {
                newMyFocus(this).css({ display: 'block', opacity: 0 });
            }, fn);
            return this;
        },
        fadeOut: function (time, type, fn) {
            if (typeof time !== 'number') fn = time, time = 400; //榛樿400姣
            if (typeof type === 'function') fn = type, type = '';
            this.animate('opacity', 0, time, type || 'linear', null, function () {
                this.style.display = 'none';
                fn && fn.call(this);
            });
            return this;
        },
        slide: function (params, time, type, fn) {
            if (typeof time !== 'number') fn = time, time = 800; //榛樿800姣
            if (typeof type === 'function') fn = type, type = '';
            for (var p in params) this.animate(p, params[p], time, type || 'easeOut', null, fn);
            return this;
        },
        stop: function () {//鍋滄鎵€鏈夎繍鍔�
            var o = this[0];
            for (var p in o) if (p.indexOf('__newMyFocusTimer__') !== -1) o[p] && clearInterval(o[p]);
            return this;
        },
        easing: {
            linear: function (t, b, c, d) { return c * t / d + b; },
            swing: function (t, b, c, d) { return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b; },
            easeIn: function (t, b, c, d) { return c * (t /= d) * t * t * t + b; },
            easeOut: function (t, b, c, d) { return -c * ((t = t / d - 1) * t * t * t - 1) + b; },
            easeInOut: function (t, b, c, d) { return ((t /= d / 2) < 1) ? (c / 2 * t * t * t * t + b) : (-c / 2 * ((t -= 2) * t * t * t - 2) + b); }
        }
    });
    newMyFocus.fn.extend({//Method(fn)
        bind: function (type, fn) {
            newMyFocus.addEvent(this[0], type, fn);
            return this;
        },
        play: function (funcLastFrame, funcCurrentFrame, seamless) {
            var this_ = this, p = this_.settings, n = this_.HTMLUListLength, t = p.time * 1000, seamless = seamless || false, //鏄惁鏃犵紳
				float = newMyFocus(this_.HTMLUList).css('float'), isLevel = float === 'left', //浠呮敮鎸�'left'鏂瑰悜鍜�'top'鏂瑰悜
				direction = isLevel ? 'left' : 'top', distance = isLevel ? p.width : p.height, //杩愬姩璺濈
				indexLast = 0, indexCurrent = p.index; //甯х储寮曞€�,榛樿0
            this_.find('.loading').remove(); //鍒犻櫎loading...
            this_.run = function (value) {//寰幆杩愬姩鍑芥暟,鏀寔+-=value
                funcLastFrame && funcLastFrame(indexLast, n); //杩愯鍓嶄竴甯�
                indexCurrent = typeof value === 'string' ? indexLast + parseInt(value.replace('=', '')) : value; //fixed index
                if (indexCurrent <= -1) {//prev run
                    indexCurrent = n - 1; //杞埌鏈€鍚庝竴甯�
                    if (seamless) this_.HTMLUList[0].parentNode.style[direction] = -n * distance + 'px'; //鏃犵紳鐨刄L瀹氫綅
                }
                if (indexCurrent >= n) {//next run
                    if (!seamless) indexCurrent = 0; //闈炴棤缂濇椂杞埌绗竴甯�
                    if (indexCurrent >= 2 * n) {//鏃犵紳
                        this_.HTMLUList[0].parentNode.style[direction] = -(n - 1) * distance + 'px'; //鏃犵紳鐨刄L瀹氫綅
                        indexCurrent = n;
                    }
                }
                if (seamless && indexLast >= n && indexCurrent < n) indexCurrent += n; //鏃犵紳鏃剁殑鎸夐挳鐐瑰嚮(淇濇寔鍚屼竴鏂瑰悜)
                funcCurrentFrame && funcCurrentFrame(indexCurrent, n, indexLast); //杩愯褰撳墠甯�
                this_.runIndex = indexLast = indexCurrent; //淇濆瓨宸茶繍琛岀殑甯х储寮�
            };
            try { this_.run(indexCurrent) } catch (e) { setTimeout(function () { this_.run(indexCurrent) }, 0) }; //杩愯...
            if (p.auto) {//鑷姩鍒囨崲
                this_.runTimer = setInterval(function () { this_.run('+=1') }, t); //榛樿閫掑杩愯姣忓抚
                this_.bind('mouseover', function () {//缁戝畾浜嬩欢
                    clearInterval(this_.runTimer);
                }).bind('mouseout', function () {
                    if (!this_.isStop) this_.runTimer = setInterval(function () { this_.run('+=1') }, t);
                });
            }
            this_.find('a').each(function () {//鍘婚櫎IE閾炬帴铏氱嚎
                this.onfocus = function () { this.blur(); }
            });
        },
        bindControl: function ($btnList, params) {//params={thumbShowNum:'鐣ョ缉鍥炬樉绀烘暟鐩�(濡傛灉鏈�)',isRunning:'杩愯涓殑鏍囪(褰撻渶瑕佸垽鏂椂)'}
            var this_ = this, p = this_.settings, type = p.trigger, delay = p.delay, par = params || {}, tsNum = par.thumbShowNum || p.thumbShowNum;
            var run = function () {
                if (this.index !== this_.runIndex && !par.isRunning) {
                    this_.run(this.index);
                    return false; //闃绘鍐掓场&榛樿浜嬩欢
                }
            };
            $btnList.each(function (i) {
                this.index = i; //璁板綍鑷韩绱㈠紩
                var o = this, $o = newMyFocus(o);
                if (type === 'click') {
                    $o.bind('mouseover', function () {
                        $o.addClass('hover');
                    }).bind('mouseout', function () {
                        $o.removeClass('hover');
                    }).bind('click', run);
                } else if (type === 'mouseover') {
                    $o.bind('mouseover', function () {
                        if (delay === 0) run.call(o);
                        else $btnList.mouseoverTimer = setTimeout(function () { run.call(o) }, delay);
                    }).bind('mouseout', function () {
                        $btnList.mouseoverTimer && clearTimeout($btnList.mouseoverTimer);
                    });
                } else {
                    alert('newMyFocus Error Setting(trigger) : \"' + type + '\"');
                    return false;
                };
            });
            if (tsNum) {//thumb
                var float = $btnList.css('float'), isLevel = float === 'left' || float === 'right';
                $btnList.dir = isLevel ? 'left' : 'top'; //鏂瑰悜
                $btnList.n = this_.HTMLUListLength; //鎬绘暟
                $btnList.showNum = tsNum; //鏄剧ず鏁扮洰
                $btnList.showStart = p.index; //鏄剧ず鐨勫紑濮嬬储寮�
                $btnList.showEnd = $btnList.showStart + tsNum - 1; //鏄剧ず鐨勭粨灏剧储寮�
                $btnList.distance = $btnList.css(isLevel ? 'width' : 'height'); //杩愬姩璺濈
                $btnList.slideBody = $btnList.parent(); //杩愬姩瀵硅薄(ul)
            }
        },
        scrollTo: function (i, time) {
            var n = this.n, dir = this.dir, $ul = this.slideBody, css = {}; //鎬绘暟/鏂瑰悜/婊戝姩body(ul)/鏍峰紡
            if (i >= this.showEnd) {//next
                this.showEnd = i < n - 1 ? i + 1 : i;

                this.showStart = this.showEnd - this.showNum + 1;
            } else if (i <= this.showStart) {//prev
                this.showStart = i > 0 ? i - 1 : 0;
                this.showEnd = this.showStart + this.showNum - 1;
            }
            css[dir] = -this.showStart * this.distance;
            $ul.slide(css, time || 500, 'easeOut');
            return this;
        }
    });
    newMyFocus.extend({//Init
        set: function (p, callback) {
            var F = this, id = p.id, oStyle = F.initBaseCSS(id);
            p.pattern = p.pattern || F.defConfig.pattern;
            p.__clsName = p.pattern + '_' + id;
            F.addEvent(window, 'load', function () { F.onloadWindow = true });
            F.loadPattern(p, function () {
                p = F.extend({}, F.defConfig, F.config[p.pattern], p); //鏀堕泦瀹屾暣鍙傛暟
                F.getBoxReady(p, function () {
                    var $o = F($id(id));
                    p.width = p.width || $o.css('width'), p.height = p.height || $o.css('height'); //鑾峰緱box楂�/瀹�
                    F.initCSS(p, $o, oStyle); //css
                    F.initHTML($o); //html
                    $o.addClass(p.pattern + ' ' + p.__clsName); //+className
                    F.getIMGReady(p, function () {
                        F.pattern[p.pattern](p, F); //杩愯pattern浠ｇ爜
                        callback && callback();
                    });
                });
            });
        },
        onloadWindow: false,
        loadPattern: function (p, callback) {
            if (this.pattern[p.pattern]) { callback(); return; } //濡傛灉宸插姞杞絧attern
            var path = this.getFilePath() + 'mf-pattern/' + p.pattern;
            var js = document.createElement("script"), css = document.createElement("link"), src = path + '.js', href = path + '.css';
            js.type = "text/javascript", js.src = src;
            css.rel = "stylesheet", css.href = href;
            var head = $tag('head')[0], isSuccess = 0, timeout = 3000; //瓒呮椂3绉�
            head.appendChild(css);
            head.appendChild(js);
            js.onload = js.onreadystatechange = function () {
                if (!js.readyState || js.readyState == "loaded" || js.readyState == "complete") callback(), isSuccess = 1;
            };
            setTimeout(function () { if (!isSuccess) alert('Failed to load: ' + src); }, timeout);
        },
        getFilePath: function () {
            var path = '';
            var scripts = $tag("script");
            for (var i = 0, len = scripts.length; i < len; i++) {
                var src = scripts[i].src;
                if (src && /newMyFocus-.*?\.js/i.test(src)) {
                    path = src;
                    break;
                }
            };
            return path.slice(0, path.lastIndexOf('/') + 1);
        },
        getBoxReady: function (p, fn) {
            var F = this;
            (function () {
                try {
                    if (F.isIE) $id(p.id).doScroll();
                    else $id(p.id).innerHTML;
                    fn();
                } catch (e) {
                    if (!F.onloadWindow) setTimeout(arguments.callee, 0);
                }
            })();
        },
        getIMGReady: function (p, callback) {
            var t = p.loadIMGTimeout;
            var box = $id(p.id), img = $tag('img', box), len = img.length, count = 0, done = false;
            if (!t || !len) { callback(); return; } //鏃犲欢杩�
            for (var i = 0; i < len; i++) {
                img[i].onload = function () {
                    count += 1;
                    if (count == len && !done) { done = true, callback(); }
                };
                if (this.isIE) img[i].src = img[i].src; //淇IE BUG
            };
            var t = t * 1000;
            setTimeout(function () {
                if (!done) { done = true, callback(); }
            }, t);
        },
        initCSS: function (p, $o, oStyle) {
            var css = [], w = p.width || '', h = p.height || '';
            if (p.wrap) $o.wrap('<div class="' + p.pattern + '_wrap"></div>');
            css.push('.' + p.__clsName + ' *{margin:0;padding:0;border:0;list-style:none;}.' + p.__clsName + '{position:relative;width:' + w + 'px;height:' + h + 'px;overflow:hidden;font:12px/1.5 Verdana;text-align:left;background:#fff;visibility:visible!important;}.' + p.__clsName + ' .loading{position:absolute;z-index:9999;width:100%;height:100%;color:#666;text-align:center;padding-top:' + 0.26 * h + 'px;background:#fff;}.' + p.__clsName + ' .pic{position:relative;width:' + w + 'px;height:' + h + 'px;overflow:hidden;}.' + p.__clsName + ' .txt li{width:' + w + 'px;height:' + p.txtHeight + 'px!important;overflow:hidden;}');
            //if(p.autoZoom) css.push('.'+p.__clsName+' .pic li{text-align:center;width:'+w+'px;height:'+h+'px;}');//缂╂斁鍥剧墖灞呬腑
            try { oStyle.styleSheet.cssText = css.join('') } catch (e) { oStyle.innerHTML = css.join('') }
        },
        initBaseCSS: function (id) {
            var s = '#' + id + ' *{display:none}', oStyle = document.createElement('style');
            oStyle.type = 'text/css';
            try { oStyle.styleSheet.cssText = s } catch (e) { oStyle.innerHTML = s }
            var oHead = $tag('head', document)[0];
            oHead.insertBefore(oStyle, oHead.firstChild);
            return oStyle;
        },
        initHTML: function ($o) {
            var $load = $o.find('.loading'), $img = $load.find('img'), img = $img[0];
            if ($img.length) {
                $load.addHtml('<p>' + img.alt + '</p>');
                if (!img.getAttribute('src')) img.style.display = 'none';
            }
        }
    });
    newMyFocus.extend({//Method(newMyFocus)
        isIE: !!(document.all && navigator.userAgent.indexOf('Opera') === -1), //!(+[1,]) BUG IN IE9+?
        addEvent: function (o, type, fn) {
            var ie = this.isIE, e = ie ? 'attachEvent' : 'addEventListener', t = (ie ? 'on' : '') + type;
            o[e](t, function (e) {
                var e = e || window.event, flag = fn.call(o, e);
                if (flag === false) {
                    if (ie) e.cancelBubble = true, e.returnValue = false;
                    else e.stopPropagation(), e.preventDefault();
                }
            }, false);
        }
    });
    //鏀寔JQ
    if (typeof jQuery !== 'undefined') {
        jQuery.fn.extend({
            newMyFocus: function (p, fn) {
                if (!p) p = {};
                p.id = this[0].id;
                if (!p.id) p.id = this[0].id = 'mF__ID__';
                newMyFocus.set(p, fn);
            }
        });
    }
})();