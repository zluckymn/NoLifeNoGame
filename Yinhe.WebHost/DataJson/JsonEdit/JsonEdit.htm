<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0048)http://tools.jb51.net/tools/json/json_editor.htm -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=GBK">

<title>JSON编辑器</title>
<style>
body,html{
	margin:0px;padding:10px;overflow:hidden;font-size:12px;
	background:#FFCC66 url(img.gif);color:#333;font-family:tahoma;
}
.title{font-size:14px;background:url(img2.gif) no-repeat;padding-left:30px;}
#ldh_ui_window{
	width:840px;height:520px; position:absolute;
	background:#fff url(img3.gif) repeat-x 0 32px;
	border:2px solid #4A84C4;border-top:none; 
	left:50%;margin-left:-420px;
	top:50%;margin-top:-260px;
}
#ldh_ui_caption{
	height:32px;line-height:32px;text-indent:1em;
	background:url(img4.gif) repeat-x; text-align:center; 
}
#ldh_ui_body_left{
	width:300px;height:450px;overflow:auto;
	position:absolute;left:10px;top:55px;
	border:1px solid #4A84C4; 
}
#editWindow{width:500px;position:absolute;left:325px;top:55px;	border:1px solid #4A84C4;}
#tree_cap{height:18px;line-height:18px;text-align:center;background:url(img5.gif) repeat-x;}
/* toolbar */
#subToolbar{
	height:29px;background:url(img6.gif) repeat-x 50% 50%;line-height:29px;	position:relative;width:100%;text-indent:10px;
}
#subToolbar a{
	color:#000;background:url(img7.gif) no-repeat 0% 50%; padding-left:20px;text-decoration:none;
}
#subToolbar span{position:absolute; right:10px;bottom:4px;}
#subToolbar a:hover{color:#fff;background-image:url(format.gif);text-decoration:underline;}
#subToolbar a#save_as{background-image:url(img9.gif); }
#subToolbar a#format_indent{background-image:url(img8.gif); }
#subToolbar a#update{background-image:url(img10.gif); }
#subToolbar a#format_compress{background-image:url(img11.gif); }
#subToolbar a#clear_txt{background-image:url(img12.gif); }
/* end */
#json_eidit{
	width:497px; border:none;margin:0px;color:#000; 
	height:340px;font-size:14px;
}
.json_editInfo{
	line-height:160%; border:1px solid #4A84C4;
	width:483px;+width:500px; height:65px; color:#003300; 
	position:absolute;left:325px;bottom:12px;
}
#json_editInfo{
	height:48px; padding-left:60px;padding-top:10px;
	background:url(img13.gif) no-repeat 28px 12px;
}
#json_editInfo b{color:red}
#ldh_ui_window .err{color:red;background-image:url(img14.gif);}
#ldh_ui_window .busy{color:#333;background-image:url(img15.gif);}
#ldh_ui_window .info{color:#006600;background-image:url(img16.gif);}
#json_editInfo input{width:50px;border:1px solid #4A84C4;height:14px;}
#json_editInfo  button{
	background:url(img17.gif) no-repeat;
	width:70px;height:20px;line-height:20px;text-align:center;
	border:none;color:#114060;letter-spacing:5px;margin-left:10px;
}
/* for tree */
img,input,select{vertical-align:middle}
#ldh_ui_window #tree{white-space:nowrap;font-size:12px;line-height:24px;}
#tree a{text-decoration:none;color:#333;}
#tree a:hover,#tree a.hot{color:#000;background:#0B92FF;}
dd,dl,dt{padding:0;margin:0;border:none;font-size:12px;}
dt img{vertical-align:middle;}
dt{height:20px;white-space:nowrap;}

</style>
<style>@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}</style></head>
<body>
<div id="ldh_ui_window">
	<div id="ldh_ui_caption"><strong class="title">JSON 编辑器</strong></div>
		<div id="ldh_ui_body_left">
			<div id="tree_cap">树视图</div>
			<div id="tree"></div>
		</div>	
		<div id="editWindow">
			<div id="subToolbar">
				<a href="javascript:void(0)" title="" id="format_indent">缩进</a> | 
				<a href="javascript:void(0)" title="" id="format_compress">紧凑</a> | 
				<a href="javascript:void(0)" title="" id="update">刷新视图</a> | 
				<a href="javascript:void(0)" title="" id="clear_txt">清空</a> | 
				<a href="javascript:void(0)" title="" id="save_as" style="display: none; ">另存为</a>
				<span>
					<label for="autoUpdate"><input type="checkbox" id="autoUpdate" checked=""> 同步更新树视图</label>
				</span>
			</div>
			<div id="edit">
			 <textarea id="json_eidit" style="color: rgb(0, 0, 0); "></textarea>
			</div>
		</div>
		<fieldset class="json_editInfo"> <legend>系统消息</legend>
			<div id="json_editInfo" class="undefined"><div></div></div>
		</fieldset>
</div>

<script>

/*
main Object
*/

JE={

	data:{},/* 关联数据 */
	code:false,/* 格式化后的代码 */
	oldCode:[],/* 历史代码 */
	editUI:null,/* 关联编辑框 */
	msgUI:null,/* 信息显示窗口 */
	treeUI:null,/* 树窗口 */
	name:'JE',/* 实例名 */
	root:'<b>ROOT</b>',/* 根节点标题 */
	checkbox:0,/* 是否添加复框 */
	hot:null,/* 选中节点 */
	indent:'    ',/*缩进符'\t'或者4个' '*/
	firstUp:true,/*第一次自动刷新*/
	onclick:Array,/*树点击通知*/
	countInfo:'',/*统计信息*/
	formating:false,/* 格式化中(禁止重构树) */

	ico:{/* 树图标 */
		//文件夹结构线
		r0:'img18.gif',
		r0c:'img19.gif',
		r1:'img20.gif',
		r1c:'img21.gif',
		r2:'img22.gif',
		r2c:'img23.gif',
		//前缀图片
		nl:'img24.gif',
		vl:'img25.gif',
		//文件结构线
		f1:'img26.gif',
		f2:'img27.gif',
		root:'img28.gif',
		//文件夹
		arr:'img29.gif',
		arrc:'img30.gif',
		obj:'img31.gif',
		objc:'img32.gif',
		//文件
		arr2:'img33.gif',
		obj2:'img34.gif'
	},

	toTree:function(){/* JSON转换为树HTML,同时格式化代码 */
		var draw=[],This=this,ico=this.ico;
		JE.firstUp=false;/*完成首次自动构造*/
		var notify=function(prefix/*前缀HTML*/,lastParent/*父是否是尾节点(确定图标是空白|结构线)*/,name/*节点名*/,value/*节点值*/,formObj/* 父是否是对象(确定子图标) */){/* 构造子节点 */
			var rl=prefix==''?ico.r0:lastParent?ico.r1:ico.r2;/* 配置根节点图标 */
			if(value&&value.constructor==Array){/* 处理数组节点 */
				draw.push('<dl><dt>',This.draw(prefix,rl,ico.arr,name,''),'</dt><dd>');/* 绘制文件夹 */
				for (var i=0;i<value.length;i++)
					notify(prefix+This.img(lastParent?ico.nl:ico.vl),i==value.length-1,i,value[i]);
				draw.push('</dd></dl>');
			}else	if(value&&typeof value=='object'){/* 处理对象节点 */
					draw.push('<dl><dt>',This.draw(prefix,rl,ico.obj,name,''),'</dt><dd>');/* 绘制文件夹 */
					var len=0,i=0;
					for(var key in value)len++;/* 获取对象成员总数 */
					for(var key in value)notify(prefix+This.img(lastParent?ico.nl:ico.vl),++i==len,key,value[key],true);
					draw.push('</dd></dl>');
				}else{/* 处理叶节点(绘制文件) */
					draw.push('<dl><dt>',This.draw(prefix,lastParent?ico.f1:ico.f2,formObj?ico.obj2:ico.arr2,name,value),'</dt></dl>');
				};
		};/* 不是[]或者{}不绘制 */
		if(typeof this.data=='object'){notify('',true,this.root,this.data);};
		if(this.treeUI)this.treeUI.innerHTML=draw.join('');/* 显示在树窗口 */
		this.msg('成功构造树视图!');
	},

	draw:function(prevfix,line,ico,name,value){/* 子项HTML构造器 */
		var cmd=false,J=this.ico,imgName=false;
		switch (line)	{//传递切换图标
			case J.r0:imgName='r0';break;
			case J.r1:imgName='r1';break;
			case J.r2:imgName='r2';
		}
		if(imgName)cmd=' onclick="'+this.name+'.show(this,\''+imgName+'\')" ';/* 加入折叠命令 */
		var type=typeof name=='string'?'(对象成员)':'(数组索引)';
		return prevfix+this.img(line,cmd)
			+(this.checkbox?'<input type="checkbox" onclick="'+this.name+'.select(this)" />':'')
			+this.img(ico)+' <a href="javascript:void(0)" onclick="'+this.name+'.click(this);" '
			+'key="'+name+'" val="'+value+'" >'
			+name+type+(value==''?'':' = ')+value+'</a>'
	},
	img:function(src,attr){/* img HTML构造 */
		return '<img src="'+src+'" '+(attr||'')+'  />';
	},
	click:function(item){/* 子项点击统一回调 */
		if(this.hot)this.hot.className='';
		this.hot=item;
		this.hot.className='hot';/* 切换选中项 */
		this.onclick(item);
	},

	format:function(txt,compress/*是否为压缩模式*/){/* 格式化JSON源码(对象转换为JSON文本) */
		if(/^\s*$/.test(txt))return this.msg('数据为空,无法格式化! ');
		try{var data=eval('('+txt+')');}
		catch(e){
			JE.editUI.style.color='red';
			return this.msg('数据源语法错误,格式化失败! 错误信息: '+e.description,'err');
		};
		JE.editUI.style.color='#000';
		var draw=[],last=false,This=this,line=compress?'':'\n',nodeCount=0,maxDepth=0;
		var notify=function(name,value,isLast,indent/*缩进*/,formObj){
			nodeCount++;/*节点计数*/
			for (var i=0,tab='';i<indent;i++ )tab+=This.indent;/* 缩进HTML */
			tab=compress?'':tab;/*压缩模式忽略缩进*/
			maxDepth=++indent;/*缩进递增并记录*/
			if(value&&value.constructor==Array){/*处理数组*/
				draw.push(tab+(formObj?('"'+name+'":'):'')+'['+line);/*缩进'[' 然后换行*/
				for (var i=0;i<value.length;i++)
					notify(i,value[i],i==value.length-1,indent,false);
				draw.push(tab+']'+(isLast?line:(','+line)));/*缩进']'换行,若非尾元素则添加逗号*/
			}else	if(value&&typeof value=='object'){/*处理对象*/
					draw.push(tab+(formObj?('"'+name+'":'):'')+'{'+line);/*缩进'{' 然后换行*/
					var len=0,i=0;
					for(var key in value)len++;
					for(var key in value)notify(key,value[key],++i==len,indent,true);
					draw.push(tab+'}'+(isLast?line:(','+line)));/*缩进'}'换行,若非尾元素则添加逗号*/
				}else{
						if(typeof value=='string')value='"'+value+'"';
						draw.push(tab+(formObj?('"'+name+'":'):'')+value+(isLast?'':',')+line);
				};
		};
		var isLast=true,indent=0;
		notify('',data,isLast,indent,false);
		this.countInfo='共处理节点<b>'+nodeCount+'</b>个,最大树深为<b>'+maxDepth+'</b>';
		return draw.join('');
	},
	msg:function(text,type){/* 编辑状态或者错误通知 */
		if(!this.msgUI)return alert(text);
		with(new Date)var now=([getHours(),getMinutes(),getSeconds()].join(':')).replace(/\b\d\b/g,'0$&');
		this.msgUI.innerHTML='<div>['+now+'] &nbsp;&nbsp;'+text.replace(/\n/g,'<br/>')+'</div>';
		this.msgUI.className=type;
	},
	show:function (ico,id){/* 显隐树节点 */
		var subView=ico.parentNode.parentNode.childNodes[1].style,J=this.ico;
		if(subView.display=='none'){
			subView.display='';
			 ico.src=J[id];
		}else{
			subView.display='none';
			 ico.src=J[id+'c'];
		};
	},
	select:function (sender){
		var sub=sender.parentNode.parentNode.getElementsByTagName("INPUT");
		for (var i=0;i<sub.length;i++ ) {sub[i].checked=sender.checked;}
	}
};

JE.add=function(){
	this.msg('功能添加中...*_^');
}

JE.editItem=function(){
	this.msg('功能添加中...*_^');
}

JE.begin=function(){/* 设置UI控件关联响应 */
	var $=function (id){return document.getElementById(id)};
	/* 关联UI */
	JE.editUI=$("json_eidit");
	JE.msgUI=$("json_editInfo");
	JE.treeUI=$("tree");
	var updateUI=$("update");
	var auto=$("autoUpdate");
	var fontSize=$("fontSize");
	/* 单击树子项 */
	JE.onclick=function(item){
		var key='键名: <input value="'+item.getAttribute('key')+'" />',
			val='  键值: '+(item.getAttribute('val')==''?'成员列表':'<input value="'+item.getAttribute('val')+'" />'),
			add='<button onclick="'+this.name+'.add(this)">新增</button>',
			edit='<button onclick="'+this.name+'.editItem(this)">修改</button>';
		JE.msg(key+val+add+edit,'info');
	}
	/* 监听代码变化事件 */
	JE.editUI.oninput=JE.editUI.onpropertychange=function (){
		if(JE.formating)return;/* 格式化不刷新树 */
		if(/^\s*$/.test(this.value))return  JE.msg('请输入JSON格式的代码!');;
		clearTimeout(JE.update);
		try{JE.data=eval('('+this.value+')');	
		}catch(e){
			JE.editUI.style.color='red';
			return JE.msg("源代码有错误: "+e.description+' , 如果正在编辑中, 请忽略此消息!','err');
		};
		JE.editUI.style.color='#000';
		if(auto.checked||JE.firstUp){/*若同步*/
			JE.msg('语法正确,正在重新构造树,请稍候...','busy');
			JE.update=setTimeout(function(){
				JE.toTree();
			},450);
		}else{
			JE.msg('语法正确,请点击刷新,或者打开视图同步开关,或者继续编辑!')
		}
		return true;
	};
	if(window.ActiveXObject)
		document.execCommand("BackgroundImageCache", false, true);
	/* 拦截Tab,自动格式化 */
	JE.editUI.onkeydown=function (){
		if(event.keyCode==9){$('format_indent').onclick();event.returnValue=false;};
		JE.code=this.value;
	}
	/* 格式化 */
	var format=function(compress){
		var code=JE.format(JE.editUI.value,compress);
		JE.formating=true;
		if(code)JE.editUI.value=code;
		JE.editUI.focus();
		setTimeout(function(){JE.formating=false;},1000);
		return code;
	}
	/* 工具栏按钮 */
	$('format_indent').onclick=function (){if(format())JE.msg('完成缩进风格转换,'+JE.countInfo)}
	$('format_compress').onclick=function (){if(format(true)!=undefined)JE.msg('完成紧凑风格转换,'+JE.countInfo);}
	updateUI.onclick=function (){
		JE.firstUp=true;
		JE.editUI.onpropertychange()?JE.msg('成功刷新视图!'):JE.msg('数据有误,刷新失败!','err')
		JE.firstUp=false;
	};
	$('clear_txt').onclick=function (){JE.editUI.value=JE.treeUI.innerHTML='';JE.editUI.focus();}
	auto.onclick=function (){JE.msg('自动同步视图功能'+(this.checked?'开启':'关闭!'));};
	/* 另存为 */
	if(/*@cc_on !@*/true){$('save_as').style.display='none'};
	$('save_as').onclick=function (){
		var d=document,w=d.createElement('IFRAME');
		w.style.display="none";
		d.body.appendChild(w);
		setTimeout(function(){
			var g=w.contentWindow.document;
			g.charset = 'utf-8';
			g.body.innerHTML=JE.editUI.value;
			g.execCommand("saveas",'', "json.txt") ;
		},1);
	}
};

/* 从这里开始 */
window.onload=function (){
	JE.begin();
}

</script>
<script>(function main() {
		var CONSTANTS = {
			PLAYER_DOM:	'object[data],embed[src],iframe[src]',
			PLAYERS: [
				{
					find: /http:\/\/static\.youku\.com\/.*q?(player|loader)(_taobao)?\.swf/,
					replace: 'http://player.opengg.me/loader.swf'
				},
				{
					find: /http:\/\/js\.tudouui\.com\/.*\/TudouVideoPlayer_Homer_.*.swf/,
					replace: 'http://player.opengg.me/TudouVideoPlayer_Homer_237.swf'
				},
				{
					find: /http:\/\/player\.youku\.com\/player\.php\//,
					replace: 'http://player.opengg.me/player.php/'
				},
				{
					find: /http:\/\/www.tudou.com\/(([a-z]|programs)\/.*)/,
					replace: 'http://player.opengg.me/td.php/$1'
				}
			],
			SHARE_DOM: '#panel_share input,input#copyInput.txt',
			SHARES: [
				{
					find: /http:\/\/player\.youku\.com\/player\.php\//,
					replace: 'http://player.opengg.me/player.php/'
				},
				{
					find: /http:\/\/www.tudou.com\/(.*v\.swf)/,
					replace: 'http://player.opengg.me/td.php/$1'
				}
			],
			TIPS_HOLDER: '#miniheader,#gTop',
			TIPS: '<div class="tips_container">OpenGG.Clean.Player \u5DF2\u542F\u7528&emsp;<a href="http://opengg.me/781/opengg-clean-player/" style="color:blue" target="_blank">\u53CD\u9988</a>&emsp;<a href="http://opengg.me/donation/" style="color:red" title="\u6211\u8981\u6350\u52A9\u6B64\u9879\u76EE" target="_blank">\u6350\u52A9</a></div>',
			STYLE: '.playBox_thx #player.player,.playBox_thx #player.player object{min-height:' + Math.max(window.innerHeight * 0.6, 580) + 'px !important}.tips_container{position:absolute;top:3em;padding:1em 2em;right:50px;color:green;opacity:0.4;background:#ddd}.tips_container:hover{opacity:0.8}.tips_container #toggleGoogle{color:red;cursor:pointer}',
			NODEINSERTED_HACK: '@-moz-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-webkit-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@-o-keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}@keyframes nodeInserted{from{opacity:0;}to{opacity:1;}}embed,object{animation-duration:.001s;-ms-animation-duration:.001s;-moz-animation-duration:.001s;-webkit-animation-duration:.001s;-o-animation-duration:.001s;animation-name:nodeInserted;-ms-animation-name:nodeInserted;-moz-animation-name:nodeInserted;-webkit-animation-name:nodeInserted;-o-animation-name:nodeInserted;}',
			TOGGLE_BTN: '#toggleGoogle'
		};
		var DONE = [];
		var UTIL = {
			addCss: function (str) {
				var style = document.createElement('style');
				style.textContent = str;
				document.head.appendChild(style);
			},
			reloadFlash: function (elem) {
				var nextSibling = elem.nextSibling;
				var parentNode = elem.parentNode;
				parentNode.removeChild(elem);
				if (nextSibling) {
					parentNode.insertBefore(elem, nextSibling);
				} else {
					parentNode.appendChild(elem);
				}
			},
			initFlash: function (elem) {
				// console.log(elem);
				if (DONE.indexOf(elem) !== -1) {
					return;
				}
				if (this.rewriteFlash(elem)) {
					this.reloadFlash(elem);
					DONE.push(elem);
				}
			},
			rewriteFlash: function (elem) {
				var atrs = ['data', 'src'];
				var players = CONSTANTS.PLAYERS;
				var needReload = false;
				UTIL.forEach(atrs, function (atr) {
					UTIL.forEach(players, function (player) {
						if (elem[atr] && player.find.test(elem[atr])) {
							elem[atr] = elem[atr].replace(player.find, player.replace);
							needReload = true;
						}
					});
				});
				return needReload;
			},
			forEach: function (arr, callback) {
				if (this.isArrayLike(arr)) {
					if (Array.prototype.forEach) {
						Array.prototype.forEach.call(arr, callback);
					} else {
						var i = 0;
						for (i = 0; i < arr.length; ++i) {
							callback.call(arr[i], arr[i]);
						}
					}
				}
			},
			isArrayLike: function (obj) {
				if (typeof obj !== 'object') {
					return false;
				}
				var types = ['Array', 'NodeList', 'HTMLCollection'];
				var i = 0;
				for (i = 0; i < types.length; ++i) {
					if (Object.prototype.toString.call(obj).indexOf(types[i]) !== -1) {
						return true;
					}
				}
				return false;
			}
		};
		function init() {
			function onDOMNodeInsertedHandler(e) {
				var target = e.target;
				if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
					UTIL.initFlash(target);
				}
			}
			function onAnimationStartHandler(e) {
				if (e.animationName === 'nodeInserted') {
					var target = e.target;
					// console.log(target);
					if (target.nodeType === 1 && /OBJECT|EMBED|IFRAME/ig.test(target.nodeName)) {
						UTIL.initFlash(target);
					}
				}
			}
			function animationNotSupported(){
				var style = document.createElement('div').style;
				var arr = ['animation', 'MozAnimation', 'webkitAnimation', 'OAnimation'];
				for(var i =0;i<arr.length;++i){
					if( arr[i] in style){
						return false;
					}
				}
				return true;
			}
			UTIL.addCss(CONSTANTS.NODEINSERTED_HACK);
			/*Firefox*/
			document.body.addEventListener('animationstart', onAnimationStartHandler, false);
			/*/Firefox*/
			/*Chrome*/
			document.body.addEventListener('webkitAnimationEnd', onAnimationStartHandler, false);
			/*/Chrome*/
			/*Opera 12+*/
			document.body.addEventListener('oAnimationStart', onAnimationStartHandler, false);
			/*/Opera 12+*/
			/*IE, but I never tested this*/
			document.body.addEventListener('msAnimationStart', onAnimationStartHandler, false);
			/*/IE, but I never tested this*/
			if (animationNotSupported()) {
				/*Old fashion, slower maybe*/
				document.body.addEventListener('DOMNodeInserted', onDOMNodeInsertedHandler, false);
				var matches = document.body.querySelectorAll(CONSTANTS.PLAYER_DOM);
				UTIL.forEach(matches, function (elem) {
					UTIL.initFlash(elem);
				});
			}
		}
		function tips() {
			var holder = document.body.querySelector(CONSTANTS.TIPS_HOLDER);
			if (holder) {
				var div = document.createElement('div');
				if (document.defaultView.getComputedStyle(holder, null).getPropertyValue('position') !== 'relative') {
					div.style.position = 'relative';
				}
				div.innerHTML = CONSTANTS.TIPS;
				holder.appendChild(div);
				UTIL.addCss(CONSTANTS.STYLE);
			}
		}
		function share(elem) {
			var pairs = CONSTANTS.SHARES;
			UTIL.forEach(pairs, function (item) {
				elem.value = elem.value.replace(item.find, item.replace);
			});
		}
		var CONTROLLER = [
			{
				host: '.',
				fn: function () {
					init();
				}
			},
			{
				host: 'youku.com',
				fn: function () {
					// UTIL.addCss(CONSTANTS.STYLE);

					var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
					UTIL.forEach(matches, share);

					tips();

					var youkuPlayer = document.body.querySelector('.playBox');
					var notWide = !document.body.querySelector('.playBox_thx');
					if (youkuPlayer && notWide) {
						youkuPlayer.className += ' playBox_thx';
					}
				}
			},
			{
				host: 'tudou.com',
				fn: function () {
					// UTIL.addCss(CONSTANTS.STYLE);
					tips();
					var tudouPlayer = document.body.querySelector('#playerObject');
					var normalDom = document.querySelector('.normal');
					if (tudouPlayer && normalDom) {
						normalDom.className = normalDom.className.replace('normal','widescreen');
					}
					var g = (typeof unsafeWindow !== 'undefined') ? unsafeWindow : window;
					var TUI_copyToClip = g.TUI.copyToClip;
					g.TUI.copyToClip = function () {
						var matches = document.body.querySelectorAll(CONSTANTS.SHARE_DOM);
						UTIL.forEach(matches, share);
						TUI_copyToClip.apply(g.TUI, arguments);
					};
				}
			}
		];
		var host = location.host;
		function PROC(item) {
			if (host.indexOf(item.host) !== -1) {
				item.fn();
				return;
			}
		}
		UTIL.forEach(CONTROLLER, PROC);
	})();</script></body></html>